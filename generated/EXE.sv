// Generated by CIRCT firtool-1.62.0
module ALU(
  input  [31:0] io_op1_v,
                io_op2_v,
  input  [3:0]  io_alu_op,
  output [31:0] io_out
);

  wire [62:0]       _io_out_T_16 = {31'h0, io_op1_v} << io_op2_v[4:0];
  wire [15:0][31:0] _GEN =
    {{32'h0},
     {32'h0},
     {32'h0},
     {32'h0},
     {32'h0},
     {{31'h0, io_op1_v < io_op2_v}},
     {{31'h0, $signed(io_op1_v) < $signed(io_op2_v)}},
     {$signed($signed(io_op1_v) >>> io_op2_v[4:0])},
     {io_op1_v >> io_op2_v[4:0]},
     {_io_out_T_16[31:0]},
     {io_op1_v ^ io_op2_v},
     {io_op1_v | io_op2_v},
     {io_op1_v & io_op2_v},
     {io_op1_v - io_op2_v},
     {io_op1_v + io_op2_v},
     {32'h0}};
  assign io_out = _GEN[io_alu_op];
endmodule

module BRU(
  input  [31:0] io_in_rs1_v,
                io_in_rs2_v,
  input  [2:0]  io_in_bru_op,
  output        io_br_flag
);

  wire       _GEN = io_in_bru_op == 3'h6 & io_in_rs1_v != io_in_rs2_v;
  wire [7:0] _GEN_0 =
    {{_GEN},
     {_GEN},
     {io_in_rs1_v == io_in_rs2_v},
     {io_in_rs1_v >= io_in_rs2_v},
     {$signed(io_in_rs1_v) >= $signed(io_in_rs2_v)},
     {io_in_rs1_v < io_in_rs2_v},
     {$signed(io_in_rs1_v) < $signed(io_in_rs2_v)},
     {_GEN}};
  assign io_br_flag = _GEN_0[io_in_bru_op];
endmodule

module EXE(
  input         clock,
                reset,
  input  [3:0]  io_alu_calc,
  input  [1:0]  io_alu_op1_sel,
                io_alu_op2_sel,
  output [31:0] io_alu_out,
  input  [2:0]  io_branch_npc_op,
                io_branch_bru_op,
  input  [31:0] io_imm,
                io_rf_read_rs1_v,
                io_rf_read_rs2_v,
                io_pc,
  output [2:0]  io_if__npc_op,
  output [31:0] io_if__imm,
                io_if__rs1_v,
  output        io_if__br_flag
);

  ALU alu_ (
    .io_op1_v
      ((io_alu_op1_sel == 2'h1 ? io_rf_read_rs1_v : 32'h0)
       | (io_alu_op1_sel == 2'h2 ? io_pc : 32'h0)),
    .io_op2_v
      ((io_alu_op2_sel == 2'h1 ? io_imm : 32'h0)
       | (io_alu_op2_sel == 2'h2 ? io_rf_read_rs2_v : 32'h0)),
    .io_alu_op (io_alu_calc),
    .io_out    (io_alu_out)
  );
  BRU bru_ (
    .io_in_rs1_v  (io_rf_read_rs1_v),
    .io_in_rs2_v  (io_rf_read_rs2_v),
    .io_in_bru_op (io_branch_bru_op),
    .io_br_flag   (io_if__br_flag)
  );
  assign io_if__npc_op = io_branch_npc_op;
  assign io_if__imm = io_imm;
  assign io_if__rs1_v = io_rf_read_rs1_v;
endmodule

