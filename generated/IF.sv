// Generated by CIRCT firtool-1.62.0
module IF (
    input         clock,
    reset,
    output [31:0] io_irom_addr,
    input  [31:0] io_irom_inst,
    output [31:0] io_out_inst,
    io_out_pc_4,
    input  [31:0] io_in_imm,
    input         io_in_br_flag,
    input  [ 2:0] io_in_op,
    input  [31:0] io_in_rs1_v
);

  reg  [31:0] pc;
  wire [31:0] _pc_T = pc + 32'h4;
  always @(posedge clock) begin
    if (reset) pc <= 32'h0;
    else begin
      automatic
      logic [7:0][31:0]
      _GEN = {
        {pc},
        {pc},
        {pc},
        {io_in_rs1_v + io_in_imm & 32'hFFFFFFFE},
        {pc + io_in_imm},
        {io_in_br_flag ? pc + io_in_rs1_v : pc},
        {_pc_T},
        {pc}
      };
      pc <= _GEN[io_in_op];
    end
  end  // always @(posedge)
  assign io_irom_addr = pc;
  assign io_out_inst  = io_irom_inst;
  assign io_out_pc_4  = _pc_T;
endmodule

