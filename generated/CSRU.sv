// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

module CSRU(
  input         clock,
                reset,
  input  [1:0]  io_op,
  input  [11:0] io_csr_i,
  input  [31:0] io_rs1,
                io_pc,
  output [31:0] io_out
);

  reg  [31:0]      mstatus;
  reg  [31:0]      mcause;
  reg  [31:0]      mepc;
  wire             _GEN = io_op == 2'h1;
  wire             _GEN_0 = io_op == 2'h2;
  wire             _csr_T = io_csr_i == 12'h300;
  wire             _csr_T_1 = io_csr_i == 12'h342;
  wire             _csr_T_2 = io_csr_i == 12'h341;
  wire             _csr_T_5 = io_csr_i == 12'h300;
  wire             _csr_T_6 = io_csr_i == 12'h342;
  wire             _csr_T_7 = io_csr_i == 12'h341;
  wire [3:0][31:0] _GEN_1 =
    {{_csr_T_5 ? mstatus : _csr_T_6 ? mcause : _csr_T_7 ? mepc : 32'h0},
     {_csr_T ? mstatus : _csr_T_1 ? mcause : _csr_T_2 ? mepc : 32'h0},
     {io_csr_i == 12'h300
        ? mstatus
        : io_csr_i == 12'h342 ? mcause : io_csr_i == 12'h341 ? mepc : 32'h0},
     {32'h0}};
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if ((`PRINTF_COND_) & _GEN & ~reset) begin
        $fwrite(32'h80000002, "accessing csr=%x\n", io_csr_i);
        $fwrite(32'h80000002, "accessing csr=%x\n", io_csr_i);
      end
      if ((`PRINTF_COND_) & ~_GEN & _GEN_0 & ~reset) begin
        $fwrite(32'h80000002, "accessing csr=%x\n", io_csr_i);
        $fwrite(32'h80000002, "accessing csr=%x\n", io_csr_i);
        $fwrite(32'h80000002, "accessing csr=%x\n", io_csr_i);
      end
      if ((`PRINTF_COND_) & ~_GEN & ~_GEN_0 & (&io_op) & ~reset) begin
        $fwrite(32'h80000002, "accessing csr=%x\n", io_csr_i);
        $fwrite(32'h80000002, "accessing csr=%x\n", io_csr_i);
        $fwrite(32'h80000002, "accessing csr=%x\n", io_csr_i);
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    if (reset) begin
      mstatus <= 32'h8;
      mcause <= 32'h0;
      mepc <= 32'h0;
    end
    else begin
      automatic logic _GEN_2;
      automatic logic _GEN_3;
      automatic logic _GEN_4;
      automatic logic _GEN_5;
      automatic logic _GEN_6;
      automatic logic _GEN_7;
      _GEN_2 = io_csr_i == 12'h300;
      _GEN_3 = io_csr_i == 12'h342;
      _GEN_4 = _GEN_2 | ~_GEN_3;
      _GEN_5 = _GEN_2 | _GEN_3;
      _GEN_6 = io_csr_i != 12'h341;
      _GEN_7 = _GEN_5 | _GEN_6;
      if (_GEN) begin
        if (_GEN_2)
          mstatus <= io_rs1;
        if (_GEN_4) begin
        end
        else
          mcause <= io_rs1;
        if (_GEN_7) begin
        end
        else
          mepc <= io_rs1;
      end
      else if (_GEN_0) begin
        automatic logic [31:0] _GEN_8;
        _GEN_8 =
          (_csr_T ? mstatus : _csr_T_1 ? mcause : _csr_T_2 ? mepc : 32'h0) | io_rs1;
        if (_GEN_2)
          mstatus <= _GEN_8;
        if (_GEN_4) begin
        end
        else
          mcause <= _GEN_8;
        if (_GEN_7) begin
        end
        else
          mepc <= _GEN_8;
      end
      else begin
        automatic logic [31:0] _GEN_9;
        _GEN_9 =
          (_csr_T_5 ? mstatus : _csr_T_6 ? mcause : _csr_T_7 ? mepc : 32'h0) & ~io_rs1;
        if ((&io_op) & _GEN_2)
          mstatus <= _GEN_9;
        if (~(&io_op) | _GEN_2 | ~_GEN_3) begin
        end
        else
          mcause <= _GEN_9;
        if (~(&io_op) | _GEN_5 | _GEN_6) begin
        end
        else
          mepc <= _GEN_9;
      end
    end
  end // always @(posedge)
  assign io_out = _GEN_1[io_op];
endmodule

