// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
`ifdef PRINTF_COND
`define PRINTF_COND_ (`PRINTF_COND)
`else  // PRINTF_COND
`define PRINTF_COND_ 1
`endif  // PRINTF_COND
`endif  // not def PRINTF_COND_

module MemU (
    input         clock,
    reset,
    input  [ 3:0] io_in_op,
    input  [31:0] io_in_addr,
    io_in_wdata,
    output [31:0] io_bus_addr,
    input  [31:0] io_bus_rdata,
    output [ 3:0] io_bus_wen,
    output [31:0] io_bus_wdata,
    io_out_rdata
);

  wire _GEN = io_in_op == 4'h1;
  wire [3:0][7:0] _GEN_0 = {
    {io_bus_rdata[31:24]}, {io_bus_rdata[23:16]}, {io_bus_rdata[15:8]}, {io_bus_rdata[7:0]}
  };
  wire [7:0] _GEN_1 = _GEN_0[io_in_addr[1:0]];
  wire _GEN_2 = io_in_op == 4'h2;
  wire _GEN_3 = io_in_addr[1:0] == 2'h2;
  wire _GEN_4 = ~(|(io_in_addr[1:0])) | _GEN_3;
  wire [7:0] _GEN_5 = _GEN_0[io_in_addr[1:0]+2'h1];
  wire _GEN_6 = io_in_op == 4'h3;
  wire _GEN_7 = io_in_op == 4'h4;
  wire _GEN_8 = io_in_op == 4'h5;
  wire _GEN_9 = io_in_op == 4'h6;
  wire _GEN_10 = io_in_op == 4'h7;
  wire _GEN_11 = io_in_op == 4'h8;
  assign io_bus_addr = {io_in_addr[31:2], 2'h0};
  assign io_bus_wen =
    ~(|io_in_op) | _GEN | _GEN_2 | _GEN_6 | _GEN_7 | _GEN_8
      ? 4'h0
      : _GEN_9
          ? 4'h1 << io_in_addr[1:0]
          : _GEN_10
              ? (_GEN_3 ? 4'hC : (|(io_in_addr[1:0])) ? 4'h0 : 4'h3)
              : {4{_GEN_11 & ~(|(io_in_addr[1:0]))}};
  assign io_bus_wdata = io_in_wdata;
  assign io_out_rdata =
    (|io_in_op)
      ? (_GEN
           ? {{24{_GEN_1[7]}}, _GEN_1}
           : _GEN_2
               ? (_GEN_4 ? {{16{_GEN_5[7]}}, _GEN_5, _GEN_1} : 32'h0)
               : _GEN_6
                   ? ((|(io_in_addr[1:0])) ? 32'h0 : io_bus_rdata)
                   : _GEN_7
                       ? {24'h0, _GEN_1}
                       : _GEN_8 & _GEN_4
                           ? {16'h0, _GEN_0[io_in_addr[1:0] + 2'h1], _GEN_1}
                           : 32'h0)
      : 32'h0;
endmodule

