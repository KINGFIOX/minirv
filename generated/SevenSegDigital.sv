// Generated by CIRCT firtool-1.62.0
module CycleShiftRegister (
    input        clock,
    reset,
    io_next,
    output [7:0] io_out
);

  reg [7:0] reg_0;
  always @(posedge clock) begin
    if (reset) reg_0 <= 8'h1;
    else if (io_next) reg_0 <= {reg_0[6:0], reg_0[7]};
  end  // always @(posedge)
  assign io_out = reg_0;
endmodule

module DigDecoder (
    input  [3:0] io_data,
    output [6:0] io_led_bits
);

  wire [15:0][6:0] _GEN =
  '{
      7'h47,
      7'h4F,
      7'h3D,
      7'h4E,
      7'h1F,
      7'h77,
      7'h7B,
      7'h7F,
      7'h70,
      7'h5F,
      7'h5B,
      7'h33,
      7'h79,
      7'h6D,
      7'h30,
      7'h7E
  }
  ;
  assign io_led_bits = ~_GEN[io_data];
endmodule

module SevenSegDigital (
    input         clock,
    reset,
    input  [ 3:0] io_input_en,
    input  [31:0] io_input,
    output [31:0] io_led_enable,
    output        io_led_dot,
    output [ 6:0] io_led_bits
);

  wire [ 7:0] _enable_reg_io_out;
  reg  [ 7:0] reg_0;
  reg  [ 7:0] reg_1;
  reg  [ 7:0] reg_2;
  reg  [ 7:0] reg_3;
  reg  [16:0] cnt_value;
  wire        wrap = cnt_value == 17'h1869F;
  always @(posedge clock) begin
    if (reset) begin
      reg_0 <= 8'h0;
      reg_1 <= 8'h0;
      reg_2 <= 8'h0;
      reg_3 <= 8'h0;
      cnt_value <= 17'h0;
    end else begin
      if (io_input_en[0]) reg_0 <= io_input[7:0];
      if (io_input_en[1]) reg_1 <= io_input[15:8];
      if (io_input_en[2]) reg_2 <= io_input[23:16];
      if (io_input_en[3]) reg_3 <= io_input[31:24];
      if (wrap) cnt_value <= 17'h0;
      else cnt_value <= cnt_value + 17'h1;
    end
  end  // always @(posedge)
  CycleShiftRegister enable_reg (
      .clock  (clock),
      .reset  (reset),
      .io_next(wrap),
      .io_out (_enable_reg_io_out)
  );
  DigDecoder decoder (
      .io_data
      ((_enable_reg_io_out[0] ? reg_0[3:0] : 4'h0)
       | (_enable_reg_io_out[1] ? reg_0[7:4] : 4'h0)
       | (_enable_reg_io_out[2] ? reg_1[3:0] : 4'h0)
       | (_enable_reg_io_out[3] ? reg_1[7:4] : 4'h0)
       | (_enable_reg_io_out[4] ? reg_2[3:0] : 4'h0)
       | (_enable_reg_io_out[5] ? reg_2[7:4] : 4'h0)
       | (_enable_reg_io_out[6] ? reg_3[3:0] : 4'h0)
       | (_enable_reg_io_out[7] ? reg_3[7:4] : 4'h0)),
      .io_led_bits(io_led_bits)
  );
  assign io_led_enable = {24'h0, ~_enable_reg_io_out};
  assign io_led_dot = 1'h1;
endmodule

