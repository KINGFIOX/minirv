// Generated by CIRCT firtool-1.62.0
module pipeline_Anon(
  input         clock,
                reset,
  input  [3:0]  io_a_ctrl_alu_calc,
  input  [1:0]  io_a_ctrl_alu_op1,
                io_a_ctrl_alu_op2,
  input  [3:0]  io_a_ctrl_op_mem,
  input  [2:0]  io_a_ctrl_wb_sel,
                io_a_ctrl_npc_op,
                io_a_ctrl_bru_op,
  input  [31:0] io_a_imm,
  input  [4:0]  io_a_rf_rs1_i,
                io_a_rf_rs2_i,
                io_a_rf_rd_i,
  output [3:0]  io_b_ctrl_alu_calc,
  output [1:0]  io_b_ctrl_alu_op1,
                io_b_ctrl_alu_op2,
  output [3:0]  io_b_ctrl_op_mem,
  output [2:0]  io_b_ctrl_wb_sel,
                io_b_ctrl_npc_op,
                io_b_ctrl_bru_op,
  output [31:0] io_b_imm,
  output [4:0]  io_b_rf_rs1_i,
                io_b_rf_rs2_i,
                io_b_rf_rd_i
);

  reg [3:0]  io_b_r_ctrl_alu_calc;
  reg [1:0]  io_b_r_ctrl_alu_op1;
  reg [1:0]  io_b_r_ctrl_alu_op2;
  reg [3:0]  io_b_r_ctrl_op_mem;
  reg [2:0]  io_b_r_ctrl_wb_sel;
  reg [2:0]  io_b_r_ctrl_npc_op;
  reg [2:0]  io_b_r_ctrl_bru_op;
  reg [31:0] io_b_r_imm;
  reg [4:0]  io_b_r_rf_rs1_i;
  reg [4:0]  io_b_r_rf_rs2_i;
  reg [4:0]  io_b_r_rf_rd_i;
  always @(posedge clock) begin
    io_b_r_ctrl_alu_calc <= io_a_ctrl_alu_calc;
    io_b_r_ctrl_alu_op1 <= io_a_ctrl_alu_op1;
    io_b_r_ctrl_alu_op2 <= io_a_ctrl_alu_op2;
    io_b_r_ctrl_op_mem <= io_a_ctrl_op_mem;
    io_b_r_ctrl_wb_sel <= io_a_ctrl_wb_sel;
    io_b_r_ctrl_npc_op <= io_a_ctrl_npc_op;
    io_b_r_ctrl_bru_op <= io_a_ctrl_bru_op;
    io_b_r_imm <= io_a_imm;
    io_b_r_rf_rs1_i <= io_a_rf_rs1_i;
    io_b_r_rf_rs2_i <= io_a_rf_rs2_i;
    io_b_r_rf_rd_i <= io_a_rf_rd_i;
  end // always @(posedge)
  assign io_b_ctrl_alu_calc = io_b_r_ctrl_alu_calc;
  assign io_b_ctrl_alu_op1 = io_b_r_ctrl_alu_op1;
  assign io_b_ctrl_alu_op2 = io_b_r_ctrl_alu_op2;
  assign io_b_ctrl_op_mem = io_b_r_ctrl_op_mem;
  assign io_b_ctrl_wb_sel = io_b_r_ctrl_wb_sel;
  assign io_b_ctrl_npc_op = io_b_r_ctrl_npc_op;
  assign io_b_ctrl_bru_op = io_b_r_ctrl_bru_op;
  assign io_b_imm = io_b_r_imm;
  assign io_b_rf_rs1_i = io_b_r_rf_rs1_i;
  assign io_b_rf_rs2_i = io_b_r_rf_rs2_i;
  assign io_b_rf_rd_i = io_b_r_rf_rd_i;
endmodule

